disps <- c(disps, disp(Stages = obs$Stages,
SexDep = as.logical(obs$SexDep),
prob_dispersal_0 = obs$prob_dispersal_0,
Distances = as.numeric(obs$Distances)))
}
params_mat <- matrix(c(lands, demos, disps), ncol = 3, byrow = F)
}
else{
print("Your map files and datasets are not matched.")
break
}
init <- Initialise(InitType = 0,
FreeType = 0,
NrCells = 10000, # We randomly distribute 10,000 individuals in suitable habitat with random
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1)) # We initialize only adults.
sim <- Simulation(Simulation = 0,
Replicates = 10,
Years = 50,
OutIntPop = 50)
s_list <- c()
for(i in 1:length(inputs_file)){
s <- RSsim(batchnum = i, # Batch ID's prevent overwritting
land = params_mat[[i, 1]],
demog = params_mat[[i, 2]],
dispersal = params_mat[[i, 3]],
init = init,
simul = sim)
s_list <- c(s_list, s)
}
return(s_list)
}
s <- setscenario("sample_raw.csv")
# RSsim()
runscenario <- function(s_list){
require(RangeShiftR)
for(i in 1:length(s_list)){
RunRS(s_list[[i]], "data/")
}
}
runscenario(s)
## Extinction
# Extinction Probability after 50 years
predextinct.prob <-function(s){
require(RangeShiftR)
prob_ls <- list()
for(i in 1:length(s)){
prob_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep,Year) %>%
# Sum individuals over all cells per year and replicate
summarise(sumPop = sum(NInd), .groups='keep') %>%
group_by(Year) %>%
# Average extinction probability (1 minus the proportion of replicates with surviving populations)
summarise(extProb = 1 - sum(sumPop > 0, na.rm = T) / 10)
}
return(prob_ls)
}
# Extinction Time after 50 years
predextinct.time <-function(s){
require(RangeShiftR)
time_ls <- list()
for(i in 1:length(s)){
time_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep, Year) %>%
summarise(sumPop = sum(NInd), .groups = "keep") %>%
filter(sumPop == 0) %>%
pull(Year) %>% mean
}
return(data.frame(ID = c(1:length(s)),
ExtTime.50y = ifelse(is.na(time_ls),
yes = "No extinction",
no = time_ls)))
}
getwd()
setwd("D:/4.spring2022/predextinct/predextinct")
devtools::install(pkg = "R")
library(predextinct)
setscenario
base::require("predextinct")
getwd()
base::require("predextinct")
setscenario
devtools::install(pkg="R")
library(predextinct)
setscenario()
setscenario()
base::require("predextinct")
git
?RangeshiftR
library(RangeshiftR)
library(RangeShiftR)
?RangeShiftR
?Demography
?Simulation
?RSsim
?RunRS
readPop
?readPop
devtools::document()
devtools::document()
devtools::document()
remove.packages("predextinct")
?Settelment
?Settlement
?Settlement
library(RangeshiftR)
library(RangeShiftR)
?Settlement
?Emigration
?demography
?Demography
/StageStructure
?StageStructure
getwd()
runscenario <- function(s_list){
require(RangeShiftR)
for(i in 1:length(s_list)){
RunRS(s_list[[i]], "data/")
}
}
getwd()
library(devtools)
devtools::install("predextinct")
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
library(predextinct)
?predextinct
?runscenario
?demo
library(predextinct)
demo
disp
devtools::install("predextinct")
demo
?demo
setscenario
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
inputs_file <- list.files(paste0("data/", "Inputs"))
inputs_file
getwd()
inputs_file <- list.files(paste0("predextinct/data/", "Inputs")) # asc raster files
inputs_file
data_df <- read.csv(paste0("data/", csv_file), header = T) # csv files of demo and disp
setwd("D:/4.spring2022/predextinct/predextinct")
inputs_file <- list.files(paste0("data/", "Inputs")) # asc raster files
inputs_file
data_df <- read.csv(paste0("data/", csv_file), header = T)
getwd()
data_df <- read.csv(paste0("data/", "awd.csv"), header = T)
getwd()
data_df <- read.csv(paste0("data/", "awd.csv"), header = T)
data_df
lands <- c()
demos <- c()
disps <- c()
inits <- c()
for(i in 1:length(inputs_file)){
obs <- data_df[i, ]
asc_raster <- paste0(inputs_file[i])
# We should save asc raster files in the data folder
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
disps <- c(disps, disp(Distances = as.numeric(obs$Distances),
Stages = obs$Stages,
prob_dispersal_0 = obs$prob_dispersal_0,
prob_dispersal_1 = obs$prob_dispersal_1))
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", list.files(asc_raster))))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
}
obs <- data_df[i, ]
obs
asc_raster <- paste0(inputs_file[i])
asc_raster
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
lands
c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
lands
rm(lands)
lands
lands
lands <- c()
ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
lands
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
demos
rm(demos)
()
demos <- c()
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
demos
disps <- c(disps, disp(Distances = as.numeric(obs$Distances),
Stages = obs$Stages,
prob_dispersal_0 = obs$prob_dispersal_0,
prob_dispersal_1 = obs$prob_dispersal_1))
disps
rm(disps)
disps <- c()
disps <- c(disps, disp(Distances = as.numeric(obs$Distances),
Stages = obs$Stages,
prob_dispersal_0 = obs$prob_dispersal_0,
prob_dispersal_1 = obs$prob_dispersal_1))
disps
rm(inits)
inits <- c()
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", list.files(asc_raster))))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
library(RangeShiftR)
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", list.files(asc_raster))))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
ncell
ncells
library(raster)
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", list.files(asc_raster))))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
inits
ifelse(ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", list.files(asc_raster)))))
ncell(raster(paste0("data/Inputs/", list.files(asc_raster))))
asc_raster
raster(paste0("data/Inputs/", list.files(asc_raster))
raster(paste0("data/Inputs/", list.files(asc_raster)))
getwd()
raster("data/Inputs/asc_raster")
asc_raster
list.files
inputs_file
inputs_file[1]
paste0(inputs_fule[1])
asc_raster[1]
asc_raster <- inputs_file[i]
ncell(raster(paste0("data/Inputs/", asc_raster)))
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", asc_raster))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", asc_raster)))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
inits
params_mat <- matrix(c(lands, demos, disps, inits), ncol = 4, byrow = F)
params_mat
devtools::install("predextinct")
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
lands <- c()
demos <- c()
disps <- c()
inits <- c()
obs <- data_df[i, ]
asc_raster <- inputs_file[i]
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[i] >= 1000,
yes = 1000,
no = data_df$Distances[i]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
disps <- c(disps, disp(Distances = as.numeric(obs$Distances),
Stages = obs$Stages,
prob_dispersal_0 = obs$prob_dispersal_0,
prob_dispersal_1 = obs$prob_dispersal_1))
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", asc_raster))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", asc_raster)))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
obs <- data_df[i, ]
inputs_file <- list.files(paste0("data/", "Inputs"))
data_df <- read.csv(paste0("data/", ott.csv), header = T) # csv files of demo and disp
getwd()
setwd("D:/4.spring2022/predextinct/predextinct")
inputs_file <- list.files(paste0("data/", "Inputs")) # asc raster files
data_df <- read.csv(paste0("data/", "ott.csv)", header = T) # csv files of demo and disp
data_df <- read.csv(paste0("data/", "ott.csv", header = T) # csv files of demo and disp
data_df <- read.csv(paste0("data/", "ott.csv"), header = T) # csv files of demo and disp
getwd()
read.csv(paste0("data/", "ott.csv"), header = T)
data_df <- read.csv(paste0("data/", "ott.csv"), header = T)
lands <- c()
demos <- c()
disps <- c()
inits <- c()
obs <- data_df[i, ]
asc_raster <- inputs_file[i]
obs <- data_df[i, ]
for(i in 1:length(inputs_file)){
obs <- data_df[i, ]
obs <- data_df[1, ]
asc_raster <- inputs_file[1]
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(asc_raster),
# If the distance of specific species are smaller than 1000, resolution will be the distance.
Resolution = ifelse(data_df$Distances[1] >= 1000,
yes = 1000,
no = data_df$Distances[1]),
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
disps <- c(disps, disp(Distances = as.numeric(obs$Distances),
Stages = obs$Stages,
prob_dispersal_0 = obs$prob_dispersal_0,
prob_dispersal_1 = obs$prob_dispersal_1))
inits <- c(inits, Initialise(InitType = 0,
FreeType = 0,
NrCells = ifelse(ncell(raster(paste0("data/Inputs/", asc_raster))) >= 10000,
yes = 10000,
no = ncell(raster(paste0("data/Inputs/", asc_raster)))), # If the number of cells is smaller than 10,000, we will use the number of cells.
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1))) # We initialize only adults.
params_mat <- matrix(c(lands, demos, disps, inits), ncol = 4, byrow = F)
sim <- Simulation(Simulation = 0,
Replicates = 10,
Years = 50,
OutIntPop = 50)
s_list <- c()
inits
inits
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
getwd()
devtools::install("predextinct")
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
library(predextinct)
setscenario
remove.packages("predextinct")
library(devtools)
devtools::install_github("https://github.com/crownk12/predextinct")
library(predextinct)
library(devtools)
devtools::install_github("https://github.com/cronwk12/predextinct")
devtools::install_github("https://github.com/crownk12/predextinct/")
setscenario
library(predextinct)
setscenario
?raster
?StageStructure
?Stagestructure
library(RangeShiftR)
?StageStructure
library(predextinct)
library(md.pattern)
library(MICE)
library(mice)
?setscenario
library(treeplyr)
install.packages("treeplyr")
library(treeplyr)
?treeplyr
library(devtools)
devtools::install_github("cromanpa94/phruta")
devtools::install_github("cromanpa94/phruta")
library(devtools)
library(devtools)
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(devtools)
devtools::document()
devtools::document()
library(predextinct)
predextinct::emig_prob()
emig_prob
emig_prob()
library(jsonlite)
?dplyr
?dplyr::union
library(devtools)
getwd()
devtools::install("predextinct")
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
library(predextinct)
predextinct::predextinct_prob()
devtools::install("predextinct")
library(rstatix)
devtools::install("predextinct")
raster
install.packages("Rdpack")
install.packages("Rdpack")
library(devtools)
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
library(predextinct)
library(roxygen2)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(devtools)
devtools::install("predextinct")
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
library(devtools)
getwd()
setwd("D:/4.spring2022/predextinct/")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
devtools::install("predextinct")
?Dispersal
library(devtools)
?par
library(devtools)
devtools::document()
