getwd()
library()
library()
install.packages("Rcpp")
install.packages("Rdpack")
install.packages("devtools")
install.packages("installr")
Sys.which("make")
Sys.which("make")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(devtools)
library(RCpp)
library(Rcpp)
library(Rdpack)
Sys.which("make")
devtools::install_github("https://github.com/RangeShifter/RangeShiftR-package", ref = "main")
devtools::install_github("https://github.com/RangeShifter/RangeShiftR-package", ref = "main")
library(RangeshiftR)
library(RangeShiftR)
Demography()
?Genetics()
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("dplyr")
library(rasters)
library(RangeshiftR)
library(RangeShiftR)
63.1 * 7 + 25.9 * 12
752.5 / 19
16*12.7 + 25 * 6
353.2 / 41
li <- c("hello", "my", "chloe")
lapply(li, toupper)
sapply(li, toupper)
apply(li, 1, toupper)
apply(li, 1, toupper)
apply(li, 0, toupper)
?apply
li
length(li)
li_1 <- matrix(1:4, nrow = 2, ncol = 2)
li_1
apply(li_1, 1, sum)
apply(li_1, 2, sum)
log(c(0.1, 1, 10, 100), 10)
log(10, 10)
log2(32)
seq(0, 1, length = 11)
seq(0, 1, by = 0.1)
seq(2, 8, by = 2)
x <- c(1, 2, 3, 4)
rnorm(x)
x <- c(1, 2, 3, 4, 5)
rnomr(x)
rnorm(x)
?rnorm
x <- c(0, 1, 2, 3, 4)
rnorm(x)
rnorm(x, mean = 0)
rnorm(x, mean = 0)
rnorm(x, mean = 0)
rnorm(x, mean = 0)
rnorm(x, mean = 0)
rnorm(x, mean = 0)
rnorm(3)
rnorm(2)
rnorm(1)
rnorm(100)
dnorm(3)
dnorm(0)
dnorm(0)
dnorm(100)
dnorm(-100)
drnom(2)
dnorm(2)
pnorm(0)
qnorm(0)
qnorm(1)
qnorm(0.1)
qnorm(0.5)
objects()
library()
getwd()
setwd("4.spring2022/predextinct")
setwd("D:/4.spring2022/predextinct")
# Set enviormnets
library(raster)
library(sp)
library(rgdal)
library(maptools)
library(dismo)
library(tidyverse)
library(tidymodels)
library(rstatix)
library(skimr)
library(RangeShiftR)
library(dismo)
library(bioclim)
library(mice)
library(VIM)
library(writexl)
# I made "predextinct" R packages. There are four main functions.
# 1. setscenario()
# 2. runscenario()
# 3. predextinct.prob()
# 4. predextinct.time()
# dir.create("Inputs")
# dir.create("Outputs")
# dir.create("Output_Maps")
# Set environments
## 1. Parameters
# Demography()
demo <- function(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv){
require(RangeShiftR) # RangeShiftR should be installed.
# Sub-function
stg <- function(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv){
trans_mat <- function(Stages, ReproductionType = 0, prob_reproduction, num_offsprings, prob_surv){
if(ReproductionType %in% c(0, 1)){
matrix(c(0, prob_reproduction, num_offsprings, prob_surv), nrow = Stages, ncol = Stages, byrow = F)
}
else if(ReproductionType == 2){
print("Still evolving")
}
else{
print("You input a wrong reproduction parameter.")
}
}
StageStructure(Stages = Stages,
TransMatrix = trans_mat(Stages, ReproductionType = 0, prob_reproduction, num_offsprings, prob_surv),
MaxAge = MaxAge,
SurvDensDep = T)
}
Demography(StageStruct = stg(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv),
ReproductionType = ReproductionType)
}
# Dispersal()
disp <- function(Stages, SexDep, prob_dispersal_0, prob_dispersal_1, Distances){
require(RangeShiftR) # RangeShiftR should be installed.
# Sub-function
emig_prob <- function(Stages, SexDep, prob_dispersal_0, prob_dispersal_1){
if(Stages == 2 & SexDep == F){
matrix(c(0, 1, prob_dispersal_0, 0), nrow = Stages, byrow = F)
}
else if(Stages == 3 & SexDep == F){
matrix(c(0, 1, 2, prob_dispersal_0, prob_dispersal_1, 0), nrow = Stages, byrow = F)
}
else if(SexDep == T){
print("Still evolving")
}
else{
print("You should input 2 or 3 Stages.")
}
}
Dispersal(Emigration = Emigration(EmigProb = emig_prob(Stages, SexDep = F, prob_dispersal_0, prob_dispersal_1),
SexDep = SexDep, StageDep = T),
Transfer = DispersalKernel(Distances = Distances),
Settlement = Settlement(Settle = 2))
}
# Initialisation()
# Genetics(): Ignore
# Simulation()
## 2. Combined parameters
setscenario <- function(csv_file){
require(RangeShiftR)
inputs_file <- list.files(paste0("data/", "Inputs")) # asc raster files
data_df <- read.csv(paste0(data/, csv_file), header = T) # csv files of demo and disp
if(length(inputs_file) == nrow(data_df)){
lands <- c()
demos <- c()
disps <- c()
for(i in 1:length(inputs_file)){
obs = data_df[i, ]
# We should save asc raster files in the data folder
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(inputs_file[i]),
Resolution = 1000,
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$ReproductionType,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
disps <- c(disps, disp(Stages = obs$Stages,
SexDep = as.logical(obs$SexDep),
prob_dispersal_0 = obs$prob_dispersal_0,
Distances = as.numeric(obs$Distances)))
}
params_mat <- matrix(c(lands, demos, disps), ncol = 3, byrow = F)
}
else{
print("Your map files and datasets are not matched.")
break
}
init <- Initialise(InitType = 0,
FreeType = 0,
NrCells = 10000, # We randomly distribute 10,000 individuals in suitable habitat with random
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1)) # We initialize only adults.
sim <- Simulation(Simulation = 0,
Replicates = 10,
Years = 50,
OutIntPop = 50)
s_list <- c()
for(i in 1:length(inputs_file)){
s <- RSsim(batchnum = i, # Batch ID's prevent overwritting
land = params_mat[[i, 1]],
demog = params_mat[[i, 2]],
dispersal = params_mat[[i, 3]],
init = init,
simul = sim)
s_list <- c(s_list, s)
}
return(s_list)
}
s <- setscenario("sample_raw.csv")
# RSsim()
runscenario <- function(s_list){
require(RangeShiftR)
for(i in 1:length(s_list)){
RunRS(s_list[[i]], "data/")
}
}
runscenario(s)
## Extinction
# Extinction Probability after 50 years
predextinct.prob <-function(s){
require(RangeShiftR)
prob_ls <- list()
for(i in 1:length(s)){
prob_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep,Year) %>%
# Sum individuals over all cells per year and replicate
summarise(sumPop = sum(NInd), .groups='keep') %>%
group_by(Year) %>%
# Average extinction probability (1 minus the proportion of replicates with surviving populations)
summarise(extProb = 1 - sum(sumPop > 0, na.rm = T) / 10)
}
return(prob_ls)
}
# Extinction Time after 50 years
predextinct.time <-function(s){
require(RangeShiftR)
time_ls <- list()
for(i in 1:length(s)){
time_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep, Year) %>%
summarise(sumPop = sum(NInd), .groups = "keep") %>%
filter(sumPop == 0) %>%
pull(Year) %>% mean
}
return(data.frame(ID = c(1:length(s)),
ExtTime.50y = ifelse(is.na(time_ls),
yes = "No extinction",
no = time_ls)))
}
# Set enviormnets
library(raster)
library(sp)
library(rgdal)
library(maptools)
library(dismo)
library(tidyverse)
library(tidymodels)
library(rstatix)
library(skimr)
library(RangeShiftR)
library(dismo)
library(bioclim)
library(mice)
library(VIM)
library(writexl)
# I made "predextinct" R packages. There are four main functions.
# 1. setscenario()
# 2. runscenario()
# 3. predextinct.prob()
# 4. predextinct.time()
# dir.create("Inputs")
# dir.create("Outputs")
# dir.create("Output_Maps")
# Set environments
## 1. Parameters
# Demography()
demo <- function(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv){
require(RangeShiftR) # RangeShiftR should be installed.
# Sub-function
stg <- function(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv){
trans_mat <- function(Stages, ReproductionType = 0, prob_reproduction, num_offsprings, prob_surv){
if(ReproductionType %in% c(0, 1)){
matrix(c(0, prob_reproduction, num_offsprings, prob_surv), nrow = Stages, ncol = Stages, byrow = F)
}
else if(ReproductionType == 2){
print("Still evolving")
}
else{
print("You input a wrong reproduction parameter.")
}
}
StageStructure(Stages = Stages,
TransMatrix = trans_mat(Stages, ReproductionType = 0, prob_reproduction, num_offsprings, prob_surv),
MaxAge = MaxAge,
SurvDensDep = T)
}
Demography(StageStruct = stg(Stages, MaxAge, ReproductionType, prob_reproduction, num_offsprings, prob_surv),
ReproductionType = ReproductionType)
}
# Dispersal()
disp <- function(Stages, SexDep, prob_dispersal_0, prob_dispersal_1, Distances){
require(RangeShiftR) # RangeShiftR should be installed.
# Sub-function
emig_prob <- function(Stages, SexDep, prob_dispersal_0, prob_dispersal_1){
if(Stages == 2 & SexDep == F){
matrix(c(0, 1, prob_dispersal_0, 0), nrow = Stages, byrow = F)
}
else if(Stages == 3 & SexDep == F){
matrix(c(0, 1, 2, prob_dispersal_0, prob_dispersal_1, 0), nrow = Stages, byrow = F)
}
else if(SexDep == T){
print("Still evolving")
}
else{
print("You should input 2 or 3 Stages.")
}
}
Dispersal(Emigration = Emigration(EmigProb = emig_prob(Stages, SexDep = F, prob_dispersal_0, prob_dispersal_1),
SexDep = SexDep, StageDep = T),
Transfer = DispersalKernel(Distances = Distances),
Settlement = Settlement(Settle = 2))
}
# Initialisation()
# Genetics(): Ignore
# Simulation()
## 2. Combined parameters
setscenario <- function(csv_file){
require(RangeShiftR)
inputs_file <- list.files(paste0("data/", "Inputs")) # asc raster files
data_df <- read.csv(paste0("data/", csv_file), header = T) # csv files of demo and disp
if(length(inputs_file) == nrow(data_df)){
lands <- c()
demos <- c()
disps <- c()
for(i in 1:length(inputs_file)){
obs = data_df[i, ]
# We should save asc raster files in the data folder
lands <- c(lands, ImportedLandscape(LandscapeFile = paste0(inputs_file[i]),
Resolution = 1000,
HabPercent = T,
K_or_DensDep = 0.5)) # Density Dependence 1/b
demos <- c(demos, demo(obs$Stages,
obs$MaxAge,
obs$ReproductionType,
obs$prob_reproduction,
obs$num_offsprings,
obs$prob_surv))
disps <- c(disps, disp(Stages = obs$Stages,
SexDep = as.logical(obs$SexDep),
prob_dispersal_0 = obs$prob_dispersal_0,
Distances = as.numeric(obs$Distances)))
}
params_mat <- matrix(c(lands, demos, disps), ncol = 3, byrow = F)
}
else{
print("Your map files and datasets are not matched.")
break
}
init <- Initialise(InitType = 0,
FreeType = 0,
NrCells = 10000, # We randomly distribute 10,000 individuals in suitable habitat with random
InitDens = 2, # Set the number of individuals per cell
IndsHaCell = 1, # set initial density to 2 individuals per cell
PropStages = c(0, 1)) # We initialize only adults.
sim <- Simulation(Simulation = 0,
Replicates = 10,
Years = 50,
OutIntPop = 50)
s_list <- c()
for(i in 1:length(inputs_file)){
s <- RSsim(batchnum = i, # Batch ID's prevent overwritting
land = params_mat[[i, 1]],
demog = params_mat[[i, 2]],
dispersal = params_mat[[i, 3]],
init = init,
simul = sim)
s_list <- c(s_list, s)
}
return(s_list)
}
s <- setscenario("sample_raw.csv")
# RSsim()
runscenario <- function(s_list){
require(RangeShiftR)
for(i in 1:length(s_list)){
RunRS(s_list[[i]], "data/")
}
}
runscenario(s)
## Extinction
# Extinction Probability after 50 years
predextinct.prob <-function(s){
require(RangeShiftR)
prob_ls <- list()
for(i in 1:length(s)){
prob_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep,Year) %>%
# Sum individuals over all cells per year and replicate
summarise(sumPop = sum(NInd), .groups='keep') %>%
group_by(Year) %>%
# Average extinction probability (1 minus the proportion of replicates with surviving populations)
summarise(extProb = 1 - sum(sumPop > 0, na.rm = T) / 10)
}
return(prob_ls)
}
# Extinction Time after 50 years
predextinct.time <-function(s){
require(RangeShiftR)
time_ls <- list()
for(i in 1:length(s)){
time_ls[[i]] <- readPop(s[[i]], "data/") %>%
group_by(Rep, Year) %>%
summarise(sumPop = sum(NInd), .groups = "keep") %>%
filter(sumPop == 0) %>%
pull(Year) %>% mean
}
return(data.frame(ID = c(1:length(s)),
ExtTime.50y = ifelse(is.na(time_ls),
yes = "No extinction",
no = time_ls)))
}
getwd()
setwd("D:/4.spring2022/predextinct/predextinct")
devtools::install(pkg = "R")
library(predextinct)
setscenario
base::require("predextinct")
getwd()
base::require("predextinct")
setscenario
devtools::install(pkg="R")
library(predextinct)
setscenario()
setscenario()
base::require("predextinct")
git
?RangeshiftR
library(RangeshiftR)
library(RangeShiftR)
?RangeShiftR
?Demography
?Simulation
?RSsim
?RunRS
readPop
?readPop
devtools::document()
devtools::document()
devtools::document()
remove.packages("predextinct")
